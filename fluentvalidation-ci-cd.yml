# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: $(Build.Version.Major).$(Build.Version.Minor).$(Date:yy)$(DayOfYear)$(Rev:.r)-preview1

trigger:
  batch: true
  branches:
    include:
    - master

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: "CI_Build"
    jobs:
      - job: CI_Build
        steps:
        - task: Assembly-Info-NetCore@2
          displayName: 'Set assembly version'
          inputs:
            Path: '$(Build.SourcesDirectory)'
            FileNames: '**/*.csproj'
            InsertAttributes: false
            FileEncoding: 'auto'
            WriteBOM: false
            PackageId: 'CodeCube.FluentValidation'
            Authors: 'Rob Lohmann'
            Company: 'Rob Lohmann'
            Copyright: 'Copyright 2020 - Rob Lohmann'
            VersionNumber: '$(Build.BuildNumber)'
            FileVersionNumber: '$(Build.BuildNumber)'
            InformationalVersion: '$(Build.BuildNumber)'
            PackageVersion: '$(Build.BuildNumber)'
            LogLevel: 'verbose'
            FailOnWarning: false
            DisableTelemetry: false

        - task: DotNetCoreCLI@2
          displayName: 'Restore NuGet Packages'
          inputs:
            command: 'restore'
            projects: '**/*.csproj'
            feedsToUse: 'select'

        - task: DotNetCoreCLI@2
          displayName: 'Build Project'
          inputs:
            command: 'build'
            projects: '**/*.csproj'
            arguments: '-c Release'

        - task: DotNetCoreCLI@2
          displayName: 'Run Unit Tests'
          inputs:
            command: 'test'
            projects: |
              **/*.Test.csproj
              **/*.Tests.csproj
            arguments: '-c Release'

        - task: DotNetCoreCLI@2
          displayName: 'NuGet Pack'
          inputs:
            command: 'pack'
            packagesToPack: '**/*.csproj'
            versioningScheme: 'byBuildNumber'
        
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'
        

  - stage: "CD_NuGet"
    dependsOn: "CI_Build"
    jobs:
    - job:
      steps:
        - task: NuGetCommand@2
          displayName: 'Push NuGet Package'
          inputs:
            command: 'push'
            packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
            nuGetFeedType: 'external'
            publishFeedCredentials: 'nuget.org'
